# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/API/locoUtilities.ipynb.

# %% auto 0
__all__ = ['makeOutputFolders', 'resampleCountLog', 'espressoSaveFig', 'espressoWriteDictToCSV', 'checkDabestVersion',
           'startProgressbar', 'drawProgressbar', 'endProgressbar']

# %% ../nbs/API/locoUtilities.ipynb 3
"""
Created on Wed Jul 15 11:04:52 2020

@author: sangyuxu
"""
import os
# from scipy.ndimage import gaussian_filter1d
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import datetime




# %% ../nbs/API/locoUtilities.ipynb 4
def makeOutputFolders(dataFolder):
    filelist=os.listdir(dataFolder)
    if 'output' not in filelist:
        outputDir = dataFolder + 'output/'
        os.mkdir(outputDir)
    else:
        outputDir = dataFolder + 'output/'
    if 'chamberPlots' not in os.listdir(outputDir):
        os.mkdir(outputDir + 'chamberPlots/')
    return outputDir

# %% ../nbs/API/locoUtilities.ipynb 5
def resampleCountLog(countLogDf, countLogName, resampleFrequencyInMs =50, longForm = False):
    originalCountLogDf = countLogDf
    resampleFrequency = str(resampleFrequencyInMs) + 'L'
    startDateTimeStr = countLogName[9:28]
    startDateTime = datetime.datetime.strptime(startDateTimeStr, '%Y-%m-%d_%H-%M-%S')
    absStartTime = datetime.datetime(2000, 1, 1, 0, 0, 0)
    countLogDfNewTime = countLogDf.copy()
    countLogDfNewTime.loc[:, 'NewAbsoluteTime'] = pd.to_timedelta(countLogDf['Seconds'], unit='s')
    countLogDfNewTime.loc[:, 'NewTime'] = startDateTime + pd.to_timedelta(countLogDf['Seconds'], unit='s')
    if longForm:
        countLogDfReIndexed=countLogDfNewTime.set_index(countLogDfNewTime['NewTime'])
    else:
        countLogDfReIndexed=countLogDfNewTime.set_index(absStartTime + countLogDfNewTime['NewAbsoluteTime'])
    # countLogDfResampled = countLogDfReIndexed.resample(resampleFrequency).agg(np.mean)
    countLogDfResampled = countLogDfReIndexed.resample(resampleFrequency).agg('mean', numeric_only = True)
    return countLogDfResampled, originalCountLogDf

    


# %% ../nbs/API/locoUtilities.ipynb 6
def espressoSaveFig(fig, figName, figDate, figDirectory, pngDPI = 300, tp = True):
    fig.savefig(figDirectory + figName + str(figDate)+'.png', transparent = tp, dpi = pngDPI,  bbox_inches='tight')
    fig.savefig(figDirectory + figName + str(figDate)+'.svg') 



# %% ../nbs/API/locoUtilities.ipynb 7
def espressoWriteDictToCSV(filename, dict):
    import csv
    with open(filename, 'w') as csv_file:
        writer = csv.writer(csv_file)
        for key, value in dict.items():
           writer.writerow([key, value])



# %% ../nbs/API/locoUtilities.ipynb 8
def checkDabestVersion():
    import dabest
    s = dabest.__version__.split('.')
    dabestVersion = float(s[0]+'.'+s[1]+s[2])
    print('dabest version = ' + dabest.__version__)
    return dabestVersion



# %% ../nbs/API/locoUtilities.ipynb 9
def startProgressbar():
    import sys
    sys.stdout.write("\n[") 

  #  toolbar_width = 10
  #  sys.stdout.write("[%s]" % ("-" * toolbar_width))
    sys.stdout.flush()
  #  sys.stdout.write("\b" * (toolbar_width+1)) # return to start of line, after '['

def drawProgressbar():    
    import sys    
    sys.stdout.write("-")
    sys.stdout.flush()
    
def endProgressbar():
    import sys
    sys.stdout.write("]\n") # this ends the progress bar





